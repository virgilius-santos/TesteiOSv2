//
//  LoginInteractor.swift
//  SantanderSample
//
//  Created by Virgilius Santos on 26/10/18.
//  Copyright (c) 2018 Virgilius Santos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
    func auth(request: Login.Request)
    func getLastUser()
}

protocol LoginDataStore: class
{
    var user: Login.UserAccount? { get set }
    var lastLogin: Login.LoginSave { get }
}

final class LoginInteractor: LoginDataStore
{
    typealias Router = (NSObjectProtocol & LoginRoutingLogic)
    
    let worker: LoginWorker
    let router: Router
    let presenter: LoginPresentationLogic
    
    var user: Login.UserAccount?
    
    var lastLogin: Login.LoginSave {
        return worker.getLastLogin()
    }
    
    init(worker: LoginWorker, router: Router, presenter: LoginPresentationLogic) {
        self.presenter = presenter
        self.worker = worker
        self.router = router
    }
}

extension LoginInteractor: LoginBusinessLogic
{
    
    func auth(request: Login.Request)
    {
        let validationId = worker.validateId(request.user)
        let validationPassword = worker.validatePassword(request.password)
        
        if !validationId {
            presenter.present(error: Login.Error.id)
        }
        else if !validationPassword {
            
            presenter.present(error: Login.Error.password)
        }
        else {
            
            worker
                .login(request) { [weak self] (result) in
                    
                    switch result{
                        
                    case .success(let userAccount):
                        self?.user = userAccount
                        self?.router.routeToDetails()
                        
                    case .error(let error):
                        self?.presenter.present(error: error)
                    }
            }
        }
    }
    
    func getLastUser()
    {
        self.presenter.present(lastLogin: lastLogin)
    }
}
