//
//  LoginInteractor.swift
//  SantanderSample
//
//  Created by Virgilius Santos on 26/10/18.
//  Copyright (c) 2018 Virgilius Santos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
    func auth(request: Login.Request)
    func getLastUser()
}

protocol LoginDataStore {
    var user: Login.UserAccount? { get set }
    var lastLogin: Login.LoginSave {get}
}

class LoginInteractor: LoginDataStore {
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker!
    var user: Login.UserAccount?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)!
    var lastLogin: Login.LoginSave {
        return worker.getLastLogin()
    }
}

extension LoginInteractor: LoginBusinessLogic {
    
    func auth(request: Login.Request) {

        let validationId = worker.validateId(request.user)
        let validationPassword = worker.validatePassword(request.password)
        
        if !validationId {
            presenter?.present(error: .idError)
        }
        else if !validationPassword {
            
            presenter?.present(error: .passwordError)
        }
        else {
            
            worker.login(request) { (result) in
                switch result{
                    
                case .success(let userAccount):
                    self.user = userAccount
                    self.router.routeToDetails()

                case .error(let error):
                    self.presenter?.present(error: .unknow(error.localizedDescription))
                }
            }
        }
    }
    
    func getLastUser() {
        self.presenter?.present(lastLogin: lastLogin)
    }
}
