//
//  DetailInteractor.swift
//  SantanderSample
//
//  Created by Virgilius Santos on 26/10/18.
//  Copyright (c) 2018 Virgilius Santos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailBusinessLogic
{
    func getDetails()
    func logout()
}

final class DetailInteractor
{
    typealias Router = (NSObjectProtocol & DetailRoutingLogic)
    
    let presenter: DetailPresentationLogic
    let worker: DetailWorker
    let router: Router
    
    let user: Login.UserAccount
    
    init(worker: DetailWorker,
         router: Router,
         presenter: DetailPresentationLogic,
         user: Login.UserAccount)
    {
        
        self.presenter = presenter
        self.worker = worker
        self.router = router
        self.user = user
    }
}

extension DetailInteractor: DetailBusinessLogic
{

    // MARK: Do something
    
    func logout()
    {
        router.routeToLogin()
    }
    
    func getDetails()
    {
        var response = Detail.Response()
        
        response.name = self.user.name
        response.bankAccount = self.user.bankAccount
        response.agency = self.user.agency
        response.balance = self.user.balance
        
        self.presenter.presentUserInfo(response: response)
        
        
        var request = Detail.Request()
        request.userId = user.userId
        
        worker
            .getDetails(
                request: request,
                completion: { [weak self] (result) in
                    
            switch result {
            case .success(let resp):
                
                response.statementList = resp.statementList
                self?.presenter.present(response: response)

            case .error(let error):
                response.error = Detail.DetailError()
                response.error?.code = 0
                response.error?.message = error.localizedDescription
                self?.presenter.present(response: response)
            }
        })
    }
}
